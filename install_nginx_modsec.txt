*** nginx and modsecurity install instruction based on 
https://tutorialforlinux.com/2016/09/23/installing-latest-nginx-on-ubuntu-14-04-trusty-lts/
https://www.nginx.com/resources/webinars/modsecurity-3-0-and-nginx-getting-started
https://www.nginx.com/resources/webinars/modsecurity-and-nginx-tuning-the-owasp-core-rule-set/

1) Login as Super User 

sudo su

2) Set Up the Nginx Mainline Apt Repo

echo "deb http://nginx.org/packages/mainline/ubuntu/ bionic nginx" | sudo tee -a /etc/apt/sources.list.d/nginx.list
echo "deb-src http://nginx.org/packages/mainline/ubuntu/ bionic nginx" | sudo tee -a /etc/apt/sources.list.d/nginx.list

3) Add the Signing Key

cd ~
wget http://nginx.org/keys/nginx_signing.key
apt-key add nginx_signing.key
rm nginx_signing.key

4) exit from su (root) and install nginx

sudo apt-get update
sudo apt-get install nginx

5) check version Nginx and keep this for further installation of ModSecurity (nginx version was: nginx/1.21.3)

nginx -v

*** Modsec install instruction from https://www.nginx.com/blog/compiling-and-installing-modsecurity-for-open-source-nginx/

6) Install Prerequisite Packages

sudo apt-get install -y apt-utils autoconf automake build-essential git libcurl4-openssl-dev libgeoip-dev liblmdb-dev libpcre++-dev libtool libxml2-dev libyajl-dev pkgconf wget zlib1g-dev
	
7) Download and Compile the ModSecurity 3.0 Source Code
	
git clone --depth 1 -b v3/master --single-branch https://github.com/SpiderLabs/ModSecurity

8) Change to the ModSecurity directory and compile the source code:

cd ModSecurity
git submodule init
git submodule update
./build.sh
./configure
make
sudo make install

9) Download the NGINX Connector for ModSecurity and Compile It as a Dynamic Module

9.1) Clone the GitHub repository:

cd ..
git clone --depth 1 https://github.com/SpiderLabs/ModSecurity-nginx.git

9.2) Download the source code corresponding to the installed version of NGINX (the complete sources are required even though only the dynamic module is being compiled):

wget http://nginx.org/download/nginx-1.21.3.tar.gz
tar zxvf nginx-1.21.3.tar.gz

9.3) Compile the dynamic module and copy it to the standard directory for modules:

cd nginx-1.21.3
./configure --with-compat --add-dynamic-module=../ModSecurity-nginx
make modules
sudo cp objs/ngx_http_modsecurity_module.so /etc/nginx/modules

10) Configure modsec and install rules

sudo mkdir /etc/nginx/modsec
cd /etc/nginx/modsec
sudo wget https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/modsecurity.conf-recommended
sudo mv modsecurity.conf-recommended modsecurity.conf

11) Enabling the OWASP CRS

cd ~
wget https://github.com/SpiderLabs/owasp-modsecurity-crs/archive/v3.0.2.tar.gz
tar -xzvf v3.0.2.tar.gz
sudo mv owasp-modsecurity-crs-3.0.2 /usr/local
sudo cp /usr/local/owasp-modsecurity-crs-3.0.2/crs-setup.conf.example /usr/local/owasp-modsecurity-crs-3.0.2/crs-setup.conf

12) edit file /etc/nginx/nginx.conf

- Add the following line in the top level (“main”) context of /etc/nginx/nginx.conf : 
	load_module modules/ngx_http_modsecurity_module.so;
- To capture all messages from the ModSecurity WAF to file /var/log/nginx/error.log (Alertflex collector use this file to read messages from ModSecurity), you need to set the logging level to info :  
	error_log /var/log/nginx/error.log info;

13) edit file /etc/nginx/modsec/modsecurity.conf

SecRuleEngine On
SecAuditEngine off

14) create the main ModSecurity WAF configuration file /etc/nginx/modsec/main.conf with next parameters:

# Include the recommended configuration
Include /etc/nginx/modsec/modsecurity.conf

# OWASP CRS v3 rules
Include /usr/local/owasp-modsecurity-crs-3.0.2/crs-setup.conf
Include /usr/local/owasp-modsecurity-crs-3.0.2/rules/*.conf


15) modify file /etc/nginx/conf.d/default.conf

server {
    listen       80;
    server_name  localhost;
    modsecurity on;
    modsecurity_rules_file /etc/nginx/modsec/main.conf;

16) test nginx and modsecurity configuration

sudo nginx -t 

Note: In case nginx error: [emerg] "modsecurity_rules_file" directive Rules error. File: /etc/nginx/modsec/modsecurity.conf. Line: 243. Column: 17. Failed to locate the unicode map file from: unicode.mapping
you can disable the parameter SecUnicodeMapFile

17) Start the NGINX.
sudo service nginx start

18) Test OWASP CRS v3 rules (192.168.1.51 replace by IP of ubuntu server)
curl http://192.168.1.51/?exec=/bin/bash

check that alert exist in file /var/log/nginx/error.log:

[info] 1296#1296: *1 ModSecurity: Warning. Matched "Operator `Rx' with parameter `^[\d.:]+$' against variable `REQUEST_HEADERS:Host' (Value: `192.168.1.51' ) [file "/usr/local/owasp-modsecurity-crs-3.0.2/rules/REQUEST-920-PROTOCOL-ENFORCEMENT.conf"] [line "777"] [id "920350"] [rev "2"] [msg "Host header is a numeric IP address"] [data "192.168.1.51"] [severity "4"] [ver "OWASP_CRS/3.0.0"] [maturity "9"] [accuracy "9"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-protocol"] [tag "OWASP_CRS/PROTOCOL_VIOLATION/IP_HOST"] [tag "WASCTC/WASC-21"] [tag "OWASP_TOP_10/A7"] [tag "PCI/6.5.10"] [hostname "192.168.1.51"] [uri "/favicon.ico"] [unique_id "1635329539"] [ref "o0,12v32,12"], client: 192.168.1.2, server: localhost, request: "GET /favicon.ico HTTP/1.1", host: "192.168.1.51", referrer: "http://192.168.1.51/?exec=/bin/bash"

